---
export const prerender = false
import { Image } from 'astro:assets'
const api = import.meta.env.APIURI
const token = import.meta.env.APITOKEN
const response = await fetch(api, {
	method: 'GET',
	headers: {
		Authorization: 'Bearer ' + token
	}
})

if (!response.ok) {
	throw new Error(`HTTP error! status: ${response.status}`)
}

const data = await response.json()
const movies = await data.response

interface Movie {
	title: string
	year: number
	stars?: string
	link: string
	poster?: any
	watchedOn: string
}

function getOrdinalSuffix(day: number) {
	if (day > 3 && day < 21) return 'th'
	switch (day) {
		case 1:
			return 'st'
		case 2:
			return 'nd'
		case 3:
			return 'rd'
		default:
			return 'th'
	}
}

const monthNames = [
	'January',
	'February',
	'March',
	'April',
	'May',
	'June',
	'July',
	'August',
	'September',
	'October',
	'November',
	'December'
]
---

<section class="movies flex flex-col pt-12">
	<div class="flex gap-2 pb-2">
		<h2 class="text-stone-400">last seen</h2>
		<a href="https://letterboxd.com/oxomoto/" class="underline">on letterboxd</a>
	</div>
	<ul class="flex flex-wrap gap-4">
		{
			movies.length > 0
				? movies.map((m: Movie, i: number) => {
						const date = new Date(m.watchedOn)
						const day = date.getDate()
						const month = date.getMonth() + 1
						const suffix = getOrdinalSuffix(day)
						const monthName = monthNames[month - 1]
						const humanReadableDate = `${day}${suffix} of ${monthName} ${date.getFullYear()}`
						return i < 5 ? (
							<li class="movie flex flex-col flex-wrap pb-8" title={m.title}>
								<a href={m.link}>
									{m.poster ? (
										<Image
											src={m?.poster}
											alt={m.title + `poster`}
											inferSize={true}
											class="aspect-2/3 rounded-sm object-cover"
										/>
									) : (
										<Image
											src="/public/assets/placeholder/pattern_checkerboard.png"
											alt="Checkerboard Pattern"
											width={auto}
											height={auto}
											class="aspect-2/3 rounded-sm"
										/>
									)}
								</a>
								{m.stars ? (
									<p class="h-6 pt-1 font-bold">{m?.stars}</p>
								) : (
									<p class="h-6 pt-1"> {` `}</p>
								)}
								<a href={m.link}>
									<h3>{m.title}</h3>
								</a>
								<p>{m.year}</p>
								<p class="text-sm">{humanReadableDate}</p>
								{m?.stars === '★' || m.stars === '½' ? (
									<span class="text-primary-700 inline-block whitespace-nowrap rounded-[0.27rem] bg-red-100 px-[0.65em] pb-[0.25em] pt-[0.35em] text-center align-baseline text-[0.75em] font-bold leading-none dark:text-darkSand">
										Avoid
									</span>
								) : null}
							</li>
						) : null
					})
				: null
		}
	</ul>
</section>

<style>
	p {
		width: 100%;
		word-wrap: break-word;
	}
	.movie {
		width: calc(20% - 1rem);
		max-width: 240px;
	}

	@media (max-width: 768px) {
		.movie {
			width: calc(33.33% - 1rem);
			max-width: 50vw;
		}
	}
</style>
