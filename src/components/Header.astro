---
import Hamburger from './hamburger.svg'
const Links = [
	{
		path: '/',
		label: 'index'
	},
	{
		path: '/about',
		label: 'about'
	},
	{
		path: '/now',
		label: 'now'
	}
]
---

<header class="sticky flex w-full justify-center" transition:persist>
	<nav
		class="bg-mauve dark:bg-dark relative flex w-80 flex-wrap justify-between rounded-md border p-2 px-4"
	>
		<div class="flex w-full items-center justify-between">
			<a href="/" class="cursor-pointer">oxomoto</a>
			<a href="/about" class="cursor-pointer"> info</a>
			<button id="togglez" class="cursor-pointer text-white dark:text-red-500">
				<Hamburger class="hamburger h-6 w-6 cursor-pointer" />
			</button>
		</div>

		<div
			id="navz"
			class="bg-mauve dark:bg-dark fixed left-1/2 w-80 -translate-x-1/2 transform overflow-hidden rounded-b-md border border-t-0 transition-all duration-300 ease-in-out"
			style="top: calc(var(--nav-height) + 0.1rem); max-height: 0; opacity: 0;"
		>
			<div class="flex flex-col gap-4 p-4">
				{
					Links.length > 0
						? Links.map((l, i) => {
								return (
									<a href={l.path} class="btn" style={`--order: ${i};`}>
										{l.label}
									</a>
								)
							})
						: null
				}
			</div>
		</div>
	</nav>
</header>

<script is:inline>
	function setupNavigation() {
		const menu = document.getElementById('togglez')
		const navz = document.getElementById('navz')
		const nav = document.querySelector('nav')

		window.navMenuShown = window.navMenuShown || false

		const closeMenu = () => {
			if (window.navMenuShown) {
				window.navMenuShown = false
				menu?.classList.remove('show')
				navz?.classList.add('animate-out')
				if (navz) {
					navz.style.maxHeight = '0'
					navz.style.opacity = '0'
				}
			}
		}

		// calculate and set the nav height as a CSS variable
		const updateNavHeight = () => {
			if (nav) {
				const navHeight = nav.getBoundingClientRect().height
				document.documentElement.style.setProperty('--nav-height', `${navHeight}px`)
			}
		}

		// initial calculation
		updateNavHeight()

		// remove any existing event listeners by cloning and replacing
		if (menu) {
			const newMenu = menu.cloneNode(true)
			menu.parentNode.replaceChild(newMenu, menu)

			// add event listener to the new element
			newMenu.addEventListener('click', () => {
				window.navMenuShown = !window.navMenuShown
				newMenu.classList.toggle('show')
				// recalculate nav height in case it changed
				updateNavHeight()

				if (!window.navMenuShown) {
					// Animate out
					navz.classList.add('animate-out')
					// Collapse and fade out
					navz.style.maxHeight = '0'
					navz.style.opacity = '0'
				} else {
					// Remove animation out class
					navz.classList.remove('animate-out')
					navz.classList.remove('hidden')
					// Expand and fade in
					const height = navz.scrollHeight
					navz.style.maxHeight = height + 'px'
					navz.style.opacity = '1'
				}
			})
		}

		// close menu when clicking on any link inside the menu
		const menuLinks = navz?.querySelectorAll('a')
		menuLinks?.forEach((link) => {
			link.addEventListener('click', closeMenu)
		})

		// close menu during navigation
		document.addEventListener('astro:before-swap', closeMenu)

		// clean up window resize listener and recreate it
		window.removeEventListener('resize', updateNavHeight)
		window.addEventListener('resize', updateNavHeight)
	}

	// run on initial load
	setupNavigation()

	// run after each page transition
	document.addEventListener('astro:page-load', setupNavigation)
</script>

<style>
	:global(.hamburger path) {
		stroke-width: 1.2px;
		stroke: var(--color-darkSand);
	}

	:global(:where(.dark, .dark *) .hamburger path) {
		stroke: var(--color-darkText);
	}
	.sticky {
		position: sticky;
		top: 0.5rem;
		z-index: 100;
	}
	#togglez.show {
		border-color: rgb(130, 130, 130) rgb(130, 130, 130) rgb(229, 229, 229) rgb(229, 229, 229);
	}
	#navz {
		transition:
			max-height 0.3s ease-in-out,
			opacity 0.3s ease-in-out;
		z-index: 99;
	}
	#navz .btn {
		opacity: 0;
		animation: stagger ease-in 0.4s forwards 1;
		animation-delay: calc(var(--order) * 0.1s);
	}

	#navz.animate-out .btn {
		animation: stagger-out ease-in 0.4s forwards 1;
		animation-delay: calc(var(--order) * 0.1s);
	}

	@keyframes stagger {
		from {
			opacity: 0;
			transform: translateY(80px);
		}

		to {
			opacity: 1;
			transform: translateY(0px);
		}
	}

	@keyframes stagger-out {
		from {
			opacity: 1;
			transform: translateY(40px);
		}

		to {
			opacity: 0;
			transform: translateY(0px);
		}
	}

	@media (max-width: 768px) {
		.btn {
			width: 100%;
		}
		.desc {
			width: 100%;
			max-width: 100%;
		}
	}
</style>
